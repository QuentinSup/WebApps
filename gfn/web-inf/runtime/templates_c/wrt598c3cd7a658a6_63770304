<?php /* Smarty version Smarty-3.1.18, created on 2017-08-10 13:00:39
         compiled from "views\index.html" */ ?>
<?php /*%%SmartyHeaderCode:23764598ab91b67e041-88279181%%*/if(!defined('SMARTY_DIR')) exit('no direct access allowed');
$_valid = $_smarty_tpl->decodeProperties(array (
  'file_dependency' => 
  array (
    '9fe7885bb06e4f73d1b877fe5057670fe3e90c74' => 
    array (
      0 => 'views\\index.html',
      1 => 1502362832,
      2 => 'file',
    ),
  ),
  'nocache_hash' => '23764598ab91b67e041-88279181',
  'function' => 
  array (
  ),
  'version' => 'Smarty-3.1.18',
  'unifunc' => 'content_598ab91b6b89c5_55221252',
  'has_nocache_code' => false,
),false); /*/%%SmartyHeaderCode%%*/?>
<?php if ($_valid && !is_callable('content_598ab91b6b89c5_55221252')) {function content_598ab91b6b89c5_55221252($_smarty_tpl) {?><!DOCTYPE html>
<html>
<head>
<!--[if IE]><meta http-equiv="X-UA-Compatible" content="IE=edge"><![endif]-->
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" />
<title>The Overshoot Day</title>
<meta charset="utf-8" />
<link type="text/css" rel="stylesheet" href="https://fonts.googleapis.com/css?family=Montserrat:400,700,900|Open+Sans:400,700,900|Lato:400,700,900" />
<link type="text/css" rel="stylesheet" href="assets/bootstrap/css/bootstrap.min.css" />
<link type="text/css" rel="stylesheet" href="assets/css/animate.css" />
<link type="text/css" rel="stylesheet" href="assets/css/main.css" />
</head>
<body>

	<div id="regions_div"></div>
	
	<div id="view">
		<!-- ko if: globalOvershootDay() -->
			<div id="globalOvershootDay">
				<span>Mondial Overshoot Day : </span><span data-bind="text: globalOvershootDayString"></span>
			</div>
		<!-- /ko -->
		<!-- ko if: region -->
		<div id="regions_detail" data-bind="with: region">
			<div class="dialog">
			<div class="dialog-head">
				<div class="dialog-head-title">
					<span data-bind="text: countryName"></span>
				</div>
			</div>
			<div class="dialog-body">
				<div class="dialog-body-content">
					<div class="col-sm-7">
						<!-- ko if: isDataLoaded() -->
						<!-- ko with: data() -->
						<div class="line animated counter" data-animation="fadeInDown" data-delay="1000">
						<div class="row">
							<div class="col-sm-5">
								<span data-bind="text: overshootDayString"></span>
							</div>
							<div class="col-sm-7">
								Overshoot day
								<p>
								The day when all the resources of the earth can produce are consumed if every countries consume like this country. 
								</p>	
							</div>
						</div>
						</div>
						<div class="line animated counter" data-animation="fadeInDown" data-delay="1400">
						<div class="row">
							<div class="col-sm-5">
								<div class="earth-prog" data-bind="attr: { 'style': 'width:' + (numberOfEarths * 30) + 'px' }"></div>
								<span class="small value" data-from="0" data-to="" data-bind="attr: { 'data-to': numberOfEarths }"></span>
							</div>
							<div class="col-sm-7">
								Number of earths
								<p>
								The number of earths that humanity would needed if every countries consume like this country.
								</p>	
							</div>
						</div>
						</div>
						<div class="line animated counter" data-animation="fadeInDown" data-delay="1800">
						<div class="row">
							<div class="col-sm-5">
								<span class="value" data-from="0" data-to="" data-bind="attr: { 'data-to': EFConsPerCap }"></span> gha / h
							</div>
							<div class="col-sm-7">
								Ecological Footprint (of consumption)
								<p>
								A measure of how much area of biologically productive land and water an individual, population, or activity requires to produce all the resources it consumes and to absorb the waste it generates, using prevailing technology and resource management practices.
								</p>	
							</div>
						</div>
						</div>
						<div class="line animated counter" data-animation="fadeInDown" data-delay="2100">
						<div class="row">
							<div class="col-sm-5">
								<span class="value" data-from="0" data-to="" data-bind="attr: { 'data-to': BiocapPerCap }"></span> gha / h
							</div>
							<div class="col-sm-7">
								Biocapacity
								<p>
								The biocapacity of a surface represents its ability to renew what people demand.
								Biocapacity can change from year to year due to climate, management, and proportion considered useful inputs to the human economy. 
								</p>
							</div>
						</div>
						</div>
						<!-- /ko -->
						<!-- /ko -->
					</div>
					<div class="col-sm-5">
						<div id="regions_detail_records"></div>
					</div>
				</div>
			</div>
			</div>
		</div>
		<!-- /ko -->
	</div>
	
	<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
	<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/knockout/3.4.2/knockout-min.js"></script>
	<script type="text/javascript" src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=" crossorigin="anonymous"></script>
	<script type="text/javascript" src="assets/js/jquery/jquery.appear.js"></script>
	<script type="text/javascript" src="assets/js/jquery/jquery.countTo.js"></script>
	<script type="text/javascript" src="assets/js/main.js"></script>
	<script>

		(function($) {
	
			var regionsData = {};
			var model = {
				region: ko.observable(),
				globalOvershootDay: ko.observable(),
				globalOvershootDayString: ko.observable()
			};
			
			model.globalOvershootDay.subscribe(function(d) {
				model.globalOvershootDayString(buildOvershootDayString(d));
				$('#globalOvershootDay').show('slow');
			});
			
			model.region.subscribe(function(d) {

			});
			
			$(document).on('click', '#regions_detail', function() {
				hideDetails();
			});

			function loadEarths() {
				$.get('http://localhost:8080/gfn/api/data/earths/2013').done(function(jsonArray) {
					var data = [['Pays', 'Number of earths']];
					var nbEarthsTot = 0;
					var nbEarthsCount = 0;
					$.each(jsonArray, function(k, v) {
						var countryName = v.countryName;
						var nbEarths 	= v.value;
						var year		= v.year;
						var iso			= v.isoa2;
						data.push([{ v: iso, f: countryName }, Math.round(nbEarths * 10) / 10]);
						
						regionsData[iso] = {
							countryName: countryName,
							numberOfEarths: nbEarths,
							iso: iso,
							countryCode: v.countryCode,
							data: ko.observable(),
							records: ko.observable(),
							isDataLoaded: ko.observable(false),
							isRecordsLoaded: ko.observable(false)
						};
						
						nbEarthsTot += nbEarths;
						nbEarthsCount++;
						
					});
					
					var d = calculateOvershootDay(nbEarthsTot / nbEarthsCount);
					model.globalOvershootDay(d);

					drawRegionsMap(data);
				});
				
			}
			
			function hideDetails() {
				$('#regions_detail')
				.css('transition', 'opacity 1s, height 1s')
				.css('opacity', '0')
				.css('height', '0');	
			}
			
			function showDetails(regionData) {
				var timeout = 0;
				if($('#regions_detail').is(':visible')) {
					hideDetails();
					timeout = 1000;
				}
				setTimeout(function() {
					model.region(regionData);
					
					$('#regions_detail .animated').each(function() {
						var element = $(this);
						var animation = element.data('animation');
						var animationDelay = element.data('delay');
						element.addClass('hiding').removeClass(animation + " visible");
						if (animationDelay) {
							setTimeout(function() {
								element.addClass(animation + " visible");
								element.removeClass('hiding');
								if (element.hasClass('counter')) {
									element.find('.value').countTo();
								}
							}, animationDelay);
						} else {
							element.addClass(animation + " visible");
							element.removeClass('hiding');
							if (element.hasClass('counter')) {
								element.find('.value').countTo();
							}
						}
					});
					
					setTimeout(function() { 
						$('#regions_detail')
						.css('transition', 'opacity 2s, height 2s')
						.css('opacity', '1')
						.css('height', '80%');
					}, 100);
				}, timeout)
			}
			
			function loadRegionRecords(iso, record) {

				var record = record || 'earth';
				var regionData = regionsData[iso];
				
				if(regionData.isRecordsLoaded()) {
					drawRecords(regionData.records());	
				} else {
				
					$.get('http://localhost:8080/gfn/api/data/country/' + regionData.countryCode + '/all/' + record).done(function(jsonArray) {
	
						var data = [['Year', 'Number of earths']];
						
						$.each(jsonArray, function(k, v) {
							data.push([v.year, v.value]);
						});

						regionData.records(data);
						regionData.isRecordsLoaded(true);
						
						drawRecords(data);
	
					});
				}

			}
			
			function drawRecords(data) {
				
				var map = google.visualization.arrayToDataTable(data);

		        var opts = {
		        	animation: {
		        		duration: 2000,
		        		easing: 'inAndOut'
		        	},
		          	curveType: 'function',
		          	legend: 'none'
		        }
		        
			    var chart = new google.visualization.LineChart(document.getElementById('regions_detail_records'));

			    chart.draw(map, opts);
			}
			
			function loadRegionData(iso) {
				
				var regionData = regionsData[iso];

				if(regionData.isDataLoaded()) {
					showDetails(regionData);
				} else {
					
					hideDetails();
				
					$.get('http://localhost:8080/gfn/api/data/country/' + regionData.countryCode + '/2013').done(function(jsonArray) {
						var EFi = 0;
						var EFe = 0;
						var EFc = 0;
						var year = 0;
						var BiocapPerCap = 0;
						var EFProdPerCap = 0;
						var EFConsPerCap = 0;
						var nbEarths = 0;
						var countryName = '';
						var iso = '';
						$.each(jsonArray, function(k, v) {
	
							if(v.record == 'Earths') {
								countryName = v.countryName;
								nbEarths 	= v.value;
								year		= v.year;
								iso			= v.isoa2;
								data.push([{ v: iso, f: countryName }, nbEarths]);
							}
							if(v.record == 'BiocapPerCap') {
								BiocapPerCap = v.value;	
							}
							if(v.record == 'EFExportsPerCap') {
								EFe = v.value;
							}
							if(v.record == 'EFImportsPerCap') {
								EFi = v.value;
							}
							if(v.record == 'EFProdPerCap') {
								EFProdPerCap = v.value;
							}
							if(v.record == 'EFConsPerCap') {
								EFConsPerCap = v.value;
							}
							
						});
						EFc = EFProdPerCap + EFi - EFe;
						console.info("[", countryName, "]");
						console.log("EFc = " + EFc);
						console.log("BiocapPerCap = " + BiocapPerCap);
						console.log("EFExportsPerCap = " + EFe);
						console.log("EFImportsPerCap = " + EFi);
						console.log("EFProdPerCap = " + EFProdPerCap);
						console.log("EFConsPerCap = " + EFConsPerCap);
						console.log("BiocapPerCap - EFConsPerCap = " + (BiocapPerCap - EFConsPerCap));
						console.log("nbEarths = " + nbEarths);
						console.log("nbEarths = " + EFConsPerCap / 1.72);
						console.log("nbEarths relative to Biocap = " + ((BiocapPerCap - EFConsPerCap) / 1.72));
						
						var d = calculateOvershootDay(nbEarths);
						
						var overshootDate = d;
						var overshootDayString = buildOvershootDayString(overshootDate);
						
						var data = {
							countryName		: countryName,
							BiocapPerCap	: Math.round(BiocapPerCap * 10) / 10,
							EFExportsPerCap	: Math.round(EFe * 10) / 10,
							EFImportsPerCap	: Math.round(EFi * 10) / 10,
							EFProdPerCap	: Math.round(EFProdPerCap * 10) / 10,
							EFConsPerCap	: Math.round(EFConsPerCap * 10) / 10,
							numberOfEarths	: Math.round(nbEarths * 10) / 10,
							overshootDay	: overshootDate,
							overshootDayString	: overshootDayString
						};
						
						regionData.data(data);
						regionData.isDataLoaded(true);
						
						showDetails(regionData);
	
					});
				}
			}
			
			google.charts.load('current', {
				'packages' : [ 'geochart', 'corechart' ],
				// Note: you will need to get a mapsApiKey for your project.
				// See: https://developers.google.com/chart/interactive/docs/basic_load_libs#load-settings
				'mapsApiKey' : 'AIzaSyD-9tSrke72PouQMnMX-a7eZSW0jkFMBWY'
			});
			google.charts.setOnLoadCallback(loadEarths);

			function selectHandler(r) {
				loadRegionData(r.region);
				loadRegionRecords(r.region);
			}
			
			function calculateOvershootDay(numberOfEarths, year) {
				if(numberOfEarths > 1) {
					var d = new Date(year || new Date().getFullYear(), 1, 1);
					d.setDate(365 / numberOfEarths);
					return d;
				}
				return null;
			}
			
			function buildOvershootDayString(d) {
				return d == null?"-":d.toLocaleDateString();
			}
			
			function drawRegionsMap(data) {
				var map = google.visualization.arrayToDataTable(data);
				var options = {
					backgroundColor: { fill: '#b0c5d2' },
					magnifyingGlass: { enable: true, zoomFactor: 7.5 },
					markerOpacity: .5,
					legend: 'none',
					sizeAxis: { minValue: 0,  maxSize: 20 },
					colorAxis: { colors: ['green', '#72cc18', '#f4aa42', '#f47441', '#cc3318', '#bf2a28', 'red'], values: [ 0, 1, 1.5, 2, 4, 6, 7 ] }
				};
				var chart = new google.visualization.GeoChart(document.getElementById('regions_div'));
				
				chart.draw(map, options);
				
				google.visualization.events.addListener(chart, 'regionClick', selectHandler);
				
				ko.applyBindings(model, $('#view')[0]);
				
			}
			
		})(jQuery);
	</script>
</body>
</html><?php }} ?>
